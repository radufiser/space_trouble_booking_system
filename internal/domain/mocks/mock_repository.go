// Code generated by MockGen. DO NOT EDIT.
// Source: internal/domain/interfaces.go
//
// Generated by this command:
//
//	mockgen -source=internal/domain/interfaces.go -destination=internal/domain/mocks/mock_repository.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
	domain "spacetrouble.com/booking/internal/domain"
)

// MockBookingRepository is a mock of BookingRepository interface.
type MockBookingRepository struct {
	ctrl     *gomock.Controller
	recorder *MockBookingRepositoryMockRecorder
	isgomock struct{}
}

// MockBookingRepositoryMockRecorder is the mock recorder for MockBookingRepository.
type MockBookingRepositoryMockRecorder struct {
	mock *MockBookingRepository
}

// NewMockBookingRepository creates a new mock instance.
func NewMockBookingRepository(ctrl *gomock.Controller) *MockBookingRepository {
	mock := &MockBookingRepository{ctrl: ctrl}
	mock.recorder = &MockBookingRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBookingRepository) EXPECT() *MockBookingRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockBookingRepository) Create(booking *domain.Booking) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", booking)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockBookingRepositoryMockRecorder) Create(booking any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockBookingRepository)(nil).Create), booking)
}

// FindAll mocks base method.
func (m *MockBookingRepository) FindAll() ([]*domain.Booking, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAll")
	ret0, _ := ret[0].([]*domain.Booking)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAll indicates an expected call of FindAll.
func (mr *MockBookingRepositoryMockRecorder) FindAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAll", reflect.TypeOf((*MockBookingRepository)(nil).FindAll))
}

// MockDestinationRepository is a mock of DestinationRepository interface.
type MockDestinationRepository struct {
	ctrl     *gomock.Controller
	recorder *MockDestinationRepositoryMockRecorder
	isgomock struct{}
}

// MockDestinationRepositoryMockRecorder is the mock recorder for MockDestinationRepository.
type MockDestinationRepositoryMockRecorder struct {
	mock *MockDestinationRepository
}

// NewMockDestinationRepository creates a new mock instance.
func NewMockDestinationRepository(ctrl *gomock.Controller) *MockDestinationRepository {
	mock := &MockDestinationRepository{ctrl: ctrl}
	mock.recorder = &MockDestinationRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDestinationRepository) EXPECT() *MockDestinationRepositoryMockRecorder {
	return m.recorder
}

// FetchAllDestinations mocks base method.
func (m *MockDestinationRepository) FetchAllDestinations() ([]domain.Destination, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchAllDestinations")
	ret0, _ := ret[0].([]domain.Destination)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchAllDestinations indicates an expected call of FetchAllDestinations.
func (mr *MockDestinationRepositoryMockRecorder) FetchAllDestinations() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchAllDestinations", reflect.TypeOf((*MockDestinationRepository)(nil).FetchAllDestinations))
}

// GetByID mocks base method.
func (m *MockDestinationRepository) GetByID(id string) (*domain.Destination, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", id)
	ret0, _ := ret[0].(*domain.Destination)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockDestinationRepositoryMockRecorder) GetByID(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockDestinationRepository)(nil).GetByID), id)
}

// MockLaunchpadRepository is a mock of LaunchpadRepository interface.
type MockLaunchpadRepository struct {
	ctrl     *gomock.Controller
	recorder *MockLaunchpadRepositoryMockRecorder
	isgomock struct{}
}

// MockLaunchpadRepositoryMockRecorder is the mock recorder for MockLaunchpadRepository.
type MockLaunchpadRepositoryMockRecorder struct {
	mock *MockLaunchpadRepository
}

// NewMockLaunchpadRepository creates a new mock instance.
func NewMockLaunchpadRepository(ctrl *gomock.Controller) *MockLaunchpadRepository {
	mock := &MockLaunchpadRepository{ctrl: ctrl}
	mock.recorder = &MockLaunchpadRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLaunchpadRepository) EXPECT() *MockLaunchpadRepositoryMockRecorder {
	return m.recorder
}

// GetByID mocks base method.
func (m *MockLaunchpadRepository) GetByID(id string) (*domain.Launchpad, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", id)
	ret0, _ := ret[0].(*domain.Launchpad)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockLaunchpadRepositoryMockRecorder) GetByID(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockLaunchpadRepository)(nil).GetByID), id)
}

// MockScheduleRepository is a mock of ScheduleRepository interface.
type MockScheduleRepository struct {
	ctrl     *gomock.Controller
	recorder *MockScheduleRepositoryMockRecorder
	isgomock struct{}
}

// MockScheduleRepositoryMockRecorder is the mock recorder for MockScheduleRepository.
type MockScheduleRepositoryMockRecorder struct {
	mock *MockScheduleRepository
}

// NewMockScheduleRepository creates a new mock instance.
func NewMockScheduleRepository(ctrl *gomock.Controller) *MockScheduleRepository {
	mock := &MockScheduleRepository{ctrl: ctrl}
	mock.recorder = &MockScheduleRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockScheduleRepository) EXPECT() *MockScheduleRepositoryMockRecorder {
	return m.recorder
}

// FetchSchedule mocks base method.
func (m *MockScheduleRepository) FetchSchedule(launchpadID string, dayOfWeek int, destinationID string) (*domain.WeeklySchedule, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchSchedule", launchpadID, dayOfWeek, destinationID)
	ret0, _ := ret[0].(*domain.WeeklySchedule)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchSchedule indicates an expected call of FetchSchedule.
func (mr *MockScheduleRepositoryMockRecorder) FetchSchedule(launchpadID, dayOfWeek, destinationID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchSchedule", reflect.TypeOf((*MockScheduleRepository)(nil).FetchSchedule), launchpadID, dayOfWeek, destinationID)
}

// MockLaunchClient is a mock of LaunchClient interface.
type MockLaunchClient struct {
	ctrl     *gomock.Controller
	recorder *MockLaunchClientMockRecorder
	isgomock struct{}
}

// MockLaunchClientMockRecorder is the mock recorder for MockLaunchClient.
type MockLaunchClientMockRecorder struct {
	mock *MockLaunchClient
}

// NewMockLaunchClient creates a new mock instance.
func NewMockLaunchClient(ctrl *gomock.Controller) *MockLaunchClient {
	mock := &MockLaunchClient{ctrl: ctrl}
	mock.recorder = &MockLaunchClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLaunchClient) EXPECT() *MockLaunchClientMockRecorder {
	return m.recorder
}

// GetUpcomingLaunches mocks base method.
func (m *MockLaunchClient) GetUpcomingLaunches() ([]domain.Launch, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUpcomingLaunches")
	ret0, _ := ret[0].([]domain.Launch)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUpcomingLaunches indicates an expected call of GetUpcomingLaunches.
func (mr *MockLaunchClientMockRecorder) GetUpcomingLaunches() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUpcomingLaunches", reflect.TypeOf((*MockLaunchClient)(nil).GetUpcomingLaunches))
}
